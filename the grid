using System;
using System.Collections.Generic;

class Solution
{
    static string gridSearch(List<string> G, List<string> P)
    {
        int R = G.Count;
        int C = G[0].Length;
        int r = P.Count;
        int c = P[0].Length;

        // Loop through each possible starting point in grid G
        for (int i = 0; i <= R - r; i++)
        {
            // Find all starting positions of P[0] in G[i]
            int index = G[i].IndexOf(P[0]);
            while (index != -1)
            {
                bool found = true;

                // Check subsequent rows for pattern match
                for (int j = 1; j < r; j++)
                {
                    if (G[i + j].IndexOf(P[j], index) != index)
                    {
                        found = false;
                        break;
                    }
                }

                // If all rows match, return YES
                if (found)
                    return "YES";

                // Look for next possible start in same row
                index = G[i].IndexOf(P[0], index + 1);
            }
        }

        // Pattern not found
        return "NO";
    }

    static void Main(string[] args)
    {
        int t = Convert.ToInt32(Console.ReadLine().Trim());

        for (int tItr = 0; tItr < t; tItr++)
        {
            string[] RC = Console.ReadLine().Split(' ');
            int R = Convert.ToInt32(RC[0]);
            int C = Convert.ToInt32(RC[1]);

            List<string> G = new List<string>();
            for (int i = 0; i < R; i++)
                G.Add(Console.ReadLine());

            string[] rc = Console.ReadLine().Split(' ');
            int r = Convert.ToInt32(rc[0]);
            int c = Convert.ToInt32(rc[1]);

            List<string> P = new List<string>();
            for (int i = 0; i < r; i++)
                P.Add(Console.ReadLine());

            string result = gridSearch(G, P);
            Console.WriteLine(result);
        }
    }
}
